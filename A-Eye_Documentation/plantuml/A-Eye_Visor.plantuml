@startuml Sequence_mode_auto

skinparam SequenceGroupBodyBackgroundColor #FFFFFF90
skinparam SequenceMessageAlign reverseDirection

actor user order 1

box "ZYBO" #LightBlue
    participant thr_server_rcv as server_rcv order 4
    participant thr_server_send as server_send order 5
    participant interpreteur as int order 6
    participant demo.sh as script order 7
    participant process_AI as AI order 8
    participant preprocess as pr order 9
end box

box "station sol" #MistyRose
    participant ihm as ihm order 2
    participant client as client order 3
end box

activate server_rcv
user -> ihm : Mode auto
ihm -> client : TC mode auto
client -> server_rcv : TC
server_rcv -> int : struct update
int -> server_send : ACK 
activate server_send
server_send -> client : ACK
deactivate server_send
client -> ihm : log
    group while auto
        int -> script : bash demo.sh
        activate script 
        note over script #LightSalmon:  update temp.bmp \n (script dependant)
        script -> AI : "start"\n (COM_MODE dependant)
        deactivate script
        activate AI 
        AI -> pr : preprocess()
        activate pr 
        note over pr #LightSalmon : update temp.csv 
        ' pr -> pr : update temp.csv
        pr -> AI
        deactivate pr 
        AI -> int : prediction\n (COM_MODE dependant)
        deactivate AI
        int -> server_send : process img_f
        group if (img_f == true)
            activate server_send
            server_send -> client : send image
            deactivate server_send
        end
    end
    client -> ihm : visionneuse
@enduml





@startuml Sequence_IA
participant AI
participant demo_sh
participant get_rand_img_py as rand
participant img_generator 
participant root_folder
participant preprocess

activate AI 
note over AI : init_arch
note over AI : load_weights
AI -> AI : wait for signal \n (COM_MODE dependant)
activate demo_sh
group while true
    group randomise img
        demo_sh -> rand : launch
        activate rand
        rand -> img_generator : get img
        rand -> root_folder : put temp.bmp
        rand -> demo_sh : finish
        deactivate rand
    end

    demo_sh -> AI : send signal \n (COM_MODE dependant)
    deactivate demo_sh

    group preprocess
        AI -> preprocess : preprocess
        activate preprocess
        preprocess -> root_folder : get temp.bmp
        note over preprocess : resize, convert
        preprocess -> root_folder : put temp.csv
        preprocess -> AI : finish
        deactivate preprocess
    end

    group process
        AI -> root_folder : load temp.csv
        note over AI : rescaling
        note over AI : process image
        note over AI : return prediction \n (COM_MODE dependant)
    end
end
deactivate AI
@enduml 