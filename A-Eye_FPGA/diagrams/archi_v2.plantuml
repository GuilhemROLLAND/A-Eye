@startuml multiadd
component multiadd{
    portin in_img
    portin in_krn

    portout out_result

    component x_1{
        portin R_img
        portin R_krn
        portout R_res
    }
    in_img --> R_img
    in_krn --> R_krn
    component x_2{
        portin G_img
        portin G_krn
        portout G_res
    }
    in_img --> G_img
    in_krn --> G_krn
    component x_3{
        portin B_img
        portin B_krn
        portout B_res
    }
    in_img --> B_img
    in_krn --> B_krn

    component +{
        portin S_1
        portin S_2
        portin S_3
        portout S_res
    }
    R_res --> S_1
    G_res --> S_2
    B_res --> S_3

    S_res --> out_result
}
@enduml

@startuml line_process
component line_proc{
    portin img
    portin krn
    portout res

    component px1_proc\nmultiadd{
        portin px1_i
        portin px1_k
        portout px1_r
    }
    img --> px1_i
    krn --> px1_k

    component px2_proc\nmultiadd{
        portin px2_i
        portin px2_k
        portout px2_r
    }
    img --> px2_i
    krn --> px2_k

    component px3_proc\nmultiadd{
        portin px3_i
        portin px3_k
        portout px3_r
    }
    img --> px3_i
    krn --> px3_k

    component + {
        portin i1
        portin i2
        portin i3
        portout add
    }
    px1_r --> i1
    px2_r --> i2
    px3_r --> i3

    add --> res
}
@enduml

@startuml pix_out_proc
component pix_out_proc{
    portin PS_img_out
    portin PS_krn_out
    portout pix_out
    component img_fifo{
        portin PS_img_in
        portout temp_img_out
    }
    PS_img_out --> PS_img_in
    component krn_fifo{
        portin PS_krn_in
        portout temp_krn_out
    }
    PS_krn_out --> PS_krn_in
    component line_proc{
        portin temp_img_in
        portin temp_krn_in
        portout temp_res_out
    }
    temp_img_out --> temp_img_in
    temp_krn_out --> temp_krn_in
    
    component adder_3_clk{
        portin temp_res_in
        portout temp_pix_out
    }
    temp_res_out --> temp_res_in
    temp_pix_out --> pix_out
}
@enduml

@startuml reconst 
component reconst{
    portin in_axis
    portout out_axis
    component out_build{
        portin fl32_11_in
        portin fl32_12_in
        portin fl32_13_in
        portin fl32_21_in
        portin fl32_22_in
        portin fl32_23_in
        portin fl32_31_in
        portin fl32_32_in
        portin fl32_33_in
        portout fl32_3x3_out_temp
    }
    in_axis --> fl32_11_in : idx=0
    in_axis --> fl32_12_in : idx=1
    in_axis --> fl32_13_in : idx=2
    in_axis --> fl32_21_in : idx=3
    in_axis --> fl32_22_in : idx=4
    in_axis --> fl32_23_in : idx=5
    in_axis --> fl32_31_in : idx=6
    in_axis --> fl32_32_in : idx=7
    in_axis --> fl32_33_in : idx=8

    component out_buffer{
        portin fl32_3x3_in
        portout fl32_3x3_out
    }
    fl32_3x3_out_temp --> fl32_3x3_in : idx = 8
    fl32_3x3_out --> out_axis : out_ready
}
note right of in_axis: Based on fl32 axi stream
note right of out_axis: Based on fl32_3x3 axi stream
@enduml
